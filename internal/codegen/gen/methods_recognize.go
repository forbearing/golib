package gen

import (
	"go/ast"
)

// IsServiceMethod1 checks whether a function declaration matches the shape
// generated by GenerateServiceMethod1/ServiceMethod1, which is:
//
//	func (r *recv) Method(ctx *types.ServiceContext, m *<pkg>.<Model>) error
func IsServiceMethod1(fn *ast.FuncDecl) bool {
	if fn == nil || fn.Recv == nil || fn.Type == nil || fn.Type.Params == nil || fn.Type.Results == nil {
		return false
	}
	// receiver must be pointer to an ident (e.g., *user)
	if !isPointerToIdent(fn.Recv) {
		return false
	}
	// params: (ctx *types.ServiceContext, second *pkg.Model)
	if len(fn.Type.Params.List) != 2 {
		return false
	}
	if !isCtxServiceContext(fn.Type.Params.List[0]) {
		return false
	}
	if !isStarSelector(fn.Type.Params.List[1]) {
		return false
	}
	// results: error
	if len(fn.Type.Results.List) != 1 {
		return false
	}
	if !isIdentName(fn.Type.Results.List[0].Type, "error") {
		return false
	}
	return true
}

// IsServiceMethod2 checks whether a function declaration matches the shape
// generated by GenerateServiceMethod2/ServiceMethod2, which is:
//
//	func (r *recv) Method(ctx *types.ServiceContext, list *[]*<pkg>.<Model>) error
func IsServiceMethod2(fn *ast.FuncDecl) bool {
	if fn == nil || fn.Recv == nil || fn.Type == nil || fn.Type.Params == nil || fn.Type.Results == nil {
		return false
	}
	if !isPointerToIdent(fn.Recv) {
		return false
	}
	if len(fn.Type.Params.List) != 2 {
		return false
	}
	if !isCtxServiceContext(fn.Type.Params.List[0]) {
		return false
	}
	// Second param must be: *[]*pkg.Model
	if !isPtrToSliceOfStarSelector(fn.Type.Params.List[1]) {
		return false
	}
	// results: error
	if len(fn.Type.Results.List) != 1 {
		return false
	}
	if !isIdentName(fn.Type.Results.List[0].Type, "error") {
		return false
	}
	return true
}

// IsServiceMethod3 checks whether a function declaration matches the shape
// generated by GenerateServiceMethod3/ServiceMethod3, which is:
//
//	func (r *recv) Method(ctx *types.ServiceContext, list ...*<pkg>.<Model>) error
func IsServiceMethod3(fn *ast.FuncDecl) bool {
	if fn == nil || fn.Recv == nil || fn.Type == nil || fn.Type.Params == nil || fn.Type.Results == nil {
		return false
	}
	if !isPointerToIdent(fn.Recv) {
		return false
	}
	if len(fn.Type.Params.List) != 2 {
		return false
	}
	if !isCtxServiceContext(fn.Type.Params.List[0]) {
		return false
	}
	// Second param must be: ...*pkg.Model
	if !isVariadicStarSelector(fn.Type.Params.List[1]) {
		return false
	}
	// results: error
	if len(fn.Type.Results.List) != 1 {
		return false
	}
	if !isIdentName(fn.Type.Results.List[0].Type, "error") {
		return false
	}
	return true
}

// IsServiceMethod4 checks whether a function declaration matches the shape
// generated by GenerateServiceMethod4/ServiceMethod4, which is:
//
//	func (r *recv) Method(ctx *types.ServiceContext, req *<pkg>.<Req>) (*<pkg>.<Rsp>, error)
func IsServiceMethod4(fn *ast.FuncDecl) bool {
	if fn == nil || fn.Recv == nil || fn.Type == nil || fn.Type.Params == nil || fn.Type.Results == nil {
		return false
	}
	if !isPointerToIdent(fn.Recv) {
		return false
	}
	if len(fn.Type.Params.List) != 2 {
		return false
	}
	if !isCtxServiceContext(fn.Type.Params.List[0]) {
		return false
	}
	// Second param must be: *pkg.Req
	if !isStarSelector(fn.Type.Params.List[1]) {
		return false
	}
	// results: (*pkg.Rsp, error)
	if len(fn.Type.Results.List) != 2 {
		return false
	}
	if !isStarSelectorType(fn.Type.Results.List[0].Type) {
		return false
	}
	if !isIdentName(fn.Type.Results.List[1].Type, "error") {
		return false
	}
	return true
}

// ---------- helpers ----------

// isPointerToIdent checks receiver is like (r *recv).
func isPointerToIdent(recv *ast.FieldList) bool {
	if recv == nil || len(recv.List) != 1 {
		return false
	}
	se, ok := recv.List[0].Type.(*ast.StarExpr)
	if !ok {
		return false
	}
	_, ok = se.X.(*ast.Ident)
	return ok
}

// isCtxServiceContext checks "*types.ServiceContext" type.
func isCtxServiceContext(field *ast.Field) bool {
	if field == nil {
		return false
	}
	se, ok := field.Type.(*ast.StarExpr)
	if !ok {
		return false
	}
	sel, ok := se.X.(*ast.SelectorExpr)
	if !ok {
		return false
	}
	pkg, ok := sel.X.(*ast.Ident)
	if !ok {
		return false
	}
	return pkg.Name == "types" && sel.Sel != nil && sel.Sel.Name == "ServiceContext"
}

// isStarSelector checks "*pkg.Type".
func isStarSelector(field *ast.Field) bool {
	if field == nil {
		return false
	}
	return isStarSelectorType(field.Type)
}

func isStarSelectorType(expr ast.Expr) bool {
	se, ok := expr.(*ast.StarExpr)
	if !ok {
		return false
	}
	sel, ok := se.X.(*ast.SelectorExpr)
	if !ok {
		return false
	}
	_, ok = sel.X.(*ast.Ident)
	if !ok {
		return false
	}
	return sel.Sel != nil
}

// isPtrToSliceOfStarSelector checks "*[]*pkg.Type".
func isPtrToSliceOfStarSelector(field *ast.Field) bool {
	if field == nil {
		return false
	}
	se, ok := field.Type.(*ast.StarExpr)
	if !ok {
		return false
	}
	arr, ok := se.X.(*ast.ArrayType)
	if !ok {
		return false
	}
	innerStar, ok := arr.Elt.(*ast.StarExpr)
	if !ok {
		return false
	}
	sel, ok := innerStar.X.(*ast.SelectorExpr)
	if !ok {
		return false
	}
	_, ok = sel.X.(*ast.Ident)
	if !ok {
		return false
	}
	return sel.Sel != nil
}

// isVariadicStarSelector checks "...*pkg.Type".
func isVariadicStarSelector(field *ast.Field) bool {
	if field == nil {
		return false
	}
	ell, ok := field.Type.(*ast.Ellipsis)
	if !ok {
		return false
	}
	innerStar, ok := ell.Elt.(*ast.StarExpr)
	if !ok {
		return false
	}
	sel, ok := innerStar.X.(*ast.SelectorExpr)
	if !ok {
		return false
	}
	_, ok = sel.X.(*ast.Ident)
	if !ok {
		return false
	}
	return sel.Sel != nil
}

// isIdentName checks if expr is an identifier with specific name.
func isIdentName(expr ast.Expr, name string) bool {
	id, ok := expr.(*ast.Ident)
	return ok && id.Name == name
}

// IsServiceType checks if a type declaration is a service struct with embedded service.Base[*Model, *Model, *Model]
// Shape: type user struct { service.Base[*model.User, *model.User, *model.User] }
func IsServiceType(spec *ast.TypeSpec) bool {
	if spec == nil || spec.Type == nil {
		return false
	}

	// Must be a struct type
	structType, ok := spec.Type.(*ast.StructType)
	if !ok || structType.Fields == nil {
		return false
	}

	// Check if this struct embeds service.Base[*T, *T, *T]
	for _, field := range structType.Fields.List {
		if len(field.Names) == 0 { // Embedded field
			if isServiceBaseWithThreeTypeParams(field.Type) {
				return true
			}
		}
	}
	return false
}

// isServiceBaseWithThreeTypeParams checks if the type is service.Base[*T, *T, *T]
func isServiceBaseWithThreeTypeParams(expr ast.Expr) bool {
	// Look for service.Base[T1, T2, T3] pattern
	indexListExpr, ok := expr.(*ast.IndexListExpr)
	if !ok {
		return false
	}

	// Check if X is service.Base
	selectorExpr, ok := indexListExpr.X.(*ast.SelectorExpr)
	if !ok {
		return false
	}

	ident, ok := selectorExpr.X.(*ast.Ident)
	if !ok || ident.Name != "service" {
		return false
	}

	if selectorExpr.Sel.Name != "Base" {
		return false
	}

	// Must have exactly 3 type parameters
	if len(indexListExpr.Indices) != 3 {
		return false
	}

	// All type parameters should be pointer types (*model.Something)
	for _, index := range indexListExpr.Indices {
		if _, ok := index.(*ast.StarExpr); !ok {
			return false
		}
	}

	return true
}
