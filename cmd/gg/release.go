package main

import (
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"strings"

	"github.com/spf13/cobra"
)

// releaseCmd represents the release command
var releaseCmd = &cobra.Command{
	Use:   "release",
	Short: "Build and release packages using goreleaser",
	Long: `Build and release packages using goreleaser.

This command will:
- Check if goreleaser is installed
- Generate .goreleaser.yml configuration if not exists
- Build release packages for multiple platforms
- Support different release modes (snapshot, release)

Examples:
  gg release                    # Build snapshot release
  gg release --publish          # Build and publish release
  gg release --init             # Generate .goreleaser.yml config
  gg release --check            # Check goreleaser installation`,
	RunE: releaseRun,
}

var (
	releaseInit     bool
	releasePublish  bool
	releaseCheck    bool
	releaseSnapshot bool
	releaseClean    bool
	releaseSkipSign bool
)

func init() {
	releaseCmd.Flags().BoolVar(&releaseInit, "init", false, "Generate .goreleaser.yml configuration file")
	releaseCmd.Flags().BoolVar(&releasePublish, "publish", false, "Publish release (requires GITHUB_TOKEN)")
	releaseCmd.Flags().BoolVar(&releaseCheck, "check", false, "Check goreleaser installation and configuration")
	releaseCmd.Flags().BoolVar(&releaseSnapshot, "snapshot", true, "Build snapshot release (default)")
	releaseCmd.Flags().BoolVar(&releaseClean, "clean", false, "Clean dist directory before build")
	releaseCmd.Flags().BoolVar(&releaseSkipSign, "skip-sign", true, "Skip signing artifacts")
}

func releaseRun(cmd *cobra.Command, args []string) error {
	logSection("Release Management")

	// Handle init flag
	if releaseInit {
		return initGoreleaserConfig()
	}

	// Handle check flag
	if releaseCheck {
		return checkGoreleaserSetup()
	}

	// Check goreleaser installation
	if !isGoreleaserInstalled() {
		fmt.Printf("%s goreleaser is not installed\n", red("✘"))
		fmt.Printf("%s Install goreleaser:\n", gray("→"))
		fmt.Printf("  %s\n", gray("# Using Homebrew (macOS/Linux)"))
		fmt.Printf("  %s\n", cyan("brew install goreleaser"))
		fmt.Printf("  %s\n", gray("# Using Go install"))
		fmt.Printf("  %s\n", cyan("go install github.com/goreleaser/goreleaser@latest"))
		fmt.Printf("  %s\n", gray("# Using curl (Linux/macOS)"))
		fmt.Printf("  %s\n", cyan("curl -sfL https://goreleaser.com/static/run | bash"))
		return fmt.Errorf("goreleaser not found")
	}

	fmt.Printf("%s goreleaser is installed\n", green("✔"))

	// Check configuration file and auto-create if not exists
	configFile := ".goreleaser.yml"
	if !fileExists(configFile) {
		configFile = ".goreleaser.yaml"
		if !fileExists(configFile) {
			fmt.Printf("%s No .goreleaser.yml found, creating default configuration\n", gray("→"))
			if err := initGoreleaserConfig(); err != nil {
				return fmt.Errorf("failed to generate config: %v", err)
			}
			fmt.Printf("%s Configuration file created automatically\n", green("✔"))
			configFile = ".goreleaser.yml"
		}
	}

	fmt.Printf("%s Using configuration: %s\n", green("✔"), configFile)

	// Clean dist directory if requested
	if releaseClean {
		if err := cleanDistDirectory(); err != nil {
			fmt.Printf("%s Failed to clean dist directory: %v\n", yellow("⚠"), err)
		}
	}

	// Build release
	if releasePublish {
		return buildRelease(false)
	} else {
		return buildRelease(true)
	}
}

// isGoreleaserInstalled checks if goreleaser is installed
func isGoreleaserInstalled() bool {
	cmd := exec.Command("goreleaser", "--version")
	err := cmd.Run()
	return err == nil
}

// initGoreleaserConfig generates a default .goreleaser.yml configuration
func initGoreleaserConfig() error {
	fmt.Printf("%s Generating .goreleaser.yml configuration\n", gray("→"))

	// Get module name for binary name
	moduleName, err := getModuleName()
	if err != nil {
		return fmt.Errorf("failed to get module name: %v", err)
	}
	binaryName := filepath.Base(moduleName)

	config := fmt.Sprintf(`# .goreleaser.yml
# Generated by gg release --init

version: 2

project_name: %s

before:
  hooks:
    - go mod tidy
    - go generate ./...

builds:
  - id: %s
    binary: %s
    env:
      - CGO_ENABLED=0
    goos:
      - linux
      - windows
      - darwin
    goarch:
      - amd64
      - arm64
    ignore:
      - goos: windows
        goarch: arm64
    flags:
      - -tags=netgo
    ldflags:
      - -s -w
      - -X 'main.version={{.Version}}'
      - -X 'main.commit={{.Commit}}'
      - -X 'main.branch={{.Branch}}'
      - -X 'main.buildTime={{.Date}}'

archives:
  - id: %s
    name_template: '{{.ProjectName}}_{{.Version}}_{{.Os}}_{{.Arch}}'
    files:
      - README*
      - LICENSE*
      - CHANGELOG*
      - "*.md"

checksum:
  name_template: 'checksums.txt'

snapshot:
  version_template: "{{.Tag}}-next"

changelog:
  sort: asc
  filters:
    exclude:
      - '^docs:'
      - '^test:'
      - '^chore:'
      - '^ci:'

# Uncomment and configure for GitHub releases
# release:
#   github:
#     owner: your-username
#     name: your-repo
#   draft: false
#   prerelease: auto

# Uncomment for Docker images
# dockers:
#   - image_templates:
#       - "your-registry/{{.ProjectName}}:{{.Version}}"
#       - "your-registry/{{.ProjectName}}:latest"
#     dockerfile: Dockerfile
#     build_flag_templates:
#       - "--label=org.opencontainers.image.created={{.Date}}"
#       - "--label=org.opencontainers.image.title={{.ProjectName}}"
#       - "--label=org.opencontainers.image.revision={{.FullCommit}}"
#       - "--label=org.opencontainers.image.version={{.Version}}"
`, binaryName, binaryName, binaryName, binaryName)

	if err := os.WriteFile(".goreleaser.yml", []byte(config), 0o644); err != nil {
		return fmt.Errorf("failed to write config file: %v", err)
	}

	fmt.Printf("%s Generated .goreleaser.yml configuration\n", green("✔"))
	fmt.Printf("%s Edit the configuration file to customize your release settings\n", gray("→"))

	return nil
}

// checkGoreleaserSetup checks goreleaser installation and configuration
func checkGoreleaserSetup() error {
	fmt.Printf("%s Checking goreleaser setup\n", gray("→"))

	// Check installation
	if !isGoreleaserInstalled() {
		fmt.Printf("%s goreleaser is not installed\n", red("✘"))
		return fmt.Errorf("goreleaser not found")
	}
	fmt.Printf("%s goreleaser is installed\n", green("✔"))

	// Get version
	cmd := exec.Command("goreleaser", "--version")
	output, err := cmd.Output()
	if err != nil {
		fmt.Printf("%s Failed to get goreleaser version: %v\n", yellow("⚠"), err)
	} else {
		version := strings.TrimSpace(string(output))
		fmt.Printf("%s Version: %s\n", gray("→"), version)
	}

	// Check configuration
	configFiles := []string{".goreleaser.yml", ".goreleaser.yaml"}
	configFound := false
	for _, configFile := range configFiles {
		if fileExists(configFile) {
			fmt.Printf("%s Configuration found: %s\n", green("✔"), configFile)
			configFound = true
			break
		}
	}

	if !configFound {
		fmt.Printf("%s No configuration file found\n", yellow("⚠"))
		fmt.Printf("%s Run 'gg release --init' to generate default configuration\n", gray("→"))
	}

	// Check git repository
	if !isGitRepository() {
		fmt.Printf("%s Not a git repository\n", red("✘"))
		return fmt.Errorf("git repository required")
	}
	fmt.Printf("%s Git repository detected\n", green("✔"))

	// Check for uncommitted changes
	if hasUncommittedChanges() {
		fmt.Printf("%s Uncommitted changes detected\n", yellow("⚠"))
		fmt.Printf("%s Commit changes before creating a release\n", gray("→"))
	} else {
		fmt.Printf("%s Working directory is clean\n", green("✔"))
	}

	// Check GITHUB_TOKEN for publishing
	if os.Getenv("GITHUB_TOKEN") != "" {
		fmt.Printf("%s GITHUB_TOKEN is set\n", green("✔"))
	} else {
		fmt.Printf("%s GITHUB_TOKEN not set (required for publishing)\n", yellow("⚠"))
		fmt.Printf("%s Set GITHUB_TOKEN environment variable for GitHub releases\n", gray("→"))
	}

	fmt.Printf("%s Setup check completed\n", green("✔"))
	return nil
}

// buildRelease builds the release using goreleaser
func buildRelease(snapshot bool) error {
	var args []string

	if snapshot {
		fmt.Printf("%s Building snapshot release\n", gray("→"))
		args = append(args, "release", "--snapshot")
	} else {
		fmt.Printf("%s Building and publishing release\n", gray("→"))
		args = append(args, "release")
	}

	args = append(args, "--clean")

	// Note: --skip-sign is not supported in newer versions of goreleaser
	// Signing can be disabled in the .goreleaser.yml configuration file

	cmd := exec.Command("goreleaser", args...)
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr

	if err := cmd.Run(); err != nil {
		fmt.Printf("%s Release build failed: %v\n", red("✘"), err)
		return fmt.Errorf("goreleaser failed: %v", err)
	}

	if snapshot {
		fmt.Printf("%s Snapshot release completed\n", green("✔"))
		fmt.Printf("%s Artifacts available in ./dist directory\n", gray("→"))
	} else {
		fmt.Printf("%s Release published successfully\n", green("✔"))
	}

	return nil
}

// cleanDistDirectory removes the dist directory
func cleanDistDirectory() error {
	fmt.Printf("%s Cleaning dist directory\n", gray("→"))
	if err := os.RemoveAll("./dist"); err != nil {
		return fmt.Errorf("failed to remove dist directory: %v", err)
	}
	fmt.Printf("%s Dist directory cleaned\n", green("✔"))
	return nil
}

// isGitRepository checks if current directory is a git repository
func isGitRepository() bool {
	cmd := exec.Command("git", "rev-parse", "--git-dir")
	err := cmd.Run()
	return err == nil
}

// hasUncommittedChanges checks if there are uncommitted changes
func hasUncommittedChanges() bool {
	cmd := exec.Command("git", "status", "--porcelain")
	output, err := cmd.Output()
	if err != nil {
		return false
	}
	return len(strings.TrimSpace(string(output))) > 0
}
