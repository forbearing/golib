// Code generated by golib; DO NOT EDIT.
package router

import (
	"demo/model/config"
	"demo/model/config/namespace"
	"demo/model/config/namespace/app"
	"demo/model/config/namespace/app/env"
	"demo/model/iam"
	"demo/model/setting"

	"github.com/forbearing/golib/router"
	"github.com/forbearing/golib/types/consts"
)

func Init() error {
	router.Register[*env.File, *env.File, *env.File](router.Auth(), "config/namespaces/:ns/apps/:app/envs/:env/files", consts.Create)
	router.Register[*env.File, *env.File, *env.File](router.Auth(), "config/namespaces/:ns/apps/:app/envs/:env/files/:filename", consts.Delete)
	router.Register[*env.File, *env.File, *env.File](router.Auth(), "config/namespaces/:ns/apps/:app/envs/:env/files/:filename", consts.Update)
	router.Register[*env.File, *env.File, *env.File](router.Auth(), "config/namespaces/:ns/apps/:app/envs/:env/files/:filename", consts.Patch)
	router.Register[*env.File, *env.File, *env.File](router.Auth(), "config/namespaces/:ns/apps/:app/envs/:env/files", consts.List)
	router.Register[*env.File, *env.File, *env.File](router.Auth(), "config/namespaces/:ns/apps/:app/envs/:env/files/:filename", consts.Get)
	router.Register[*env.Item, *env.Item, *env.Item](router.Auth(), "config/namespaces/:ns/apps/:app/envs/:env/items", consts.Create)
	router.Register[*env.Item, *env.Item, *env.Item](router.Auth(), "config/namespaces/:ns/apps/:app/envs/:env/items/:key", consts.Delete)
	router.Register[*env.Item, *env.Item, *env.Item](router.Auth(), "config/namespaces/:ns/apps/:app/envs/:env/items/:key", consts.Update)
	router.Register[*env.Item, *env.Item, *env.Item](router.Auth(), "config/namespaces/:ns/apps/:app/envs/:env/items/:key", consts.Patch)
	router.Register[*env.Item, *env.Item, *env.ItemRsp](router.Auth(), "config/namespaces/:ns/apps/:app/envs/:env/items", consts.List)
	router.Register[*env.Item, *env.Item, *env.Item](router.Auth(), "config/namespaces/:ns/apps/:app/envs/:env/items/:key", consts.Get)
	router.Register[*app.Env, *app.Env, *app.Env](router.Auth(), "config/namespaces/:ns/apps/:app/envs", consts.Create)
	router.Register[*app.Env, *app.Env, *app.Env](router.Auth(), "config/namespaces/:ns/apps/:app/envs/:env", consts.Delete)
	router.Register[*app.Env, *app.Env, *app.Env](router.Auth(), "config/namespaces/:ns/apps/:app/envs/:env", consts.Update)
	router.Register[*app.Env, *app.Env, *app.Env](router.Auth(), "config/namespaces/:ns/apps/:app/envs/:env", consts.Patch)
	router.Register[*app.Env, *app.Env, *app.Env](router.Auth(), "config/namespaces/:ns/apps/:app/envs", consts.List)
	router.Register[*app.Env, *app.Env, *app.Env](router.Auth(), "config/namespaces/:ns/apps/:app/envs/:env", consts.Get)
	router.Register[*app.FileTemplate, *app.FileTemplate, *app.FileTemplate](router.Auth(), "config/namespaces/:ns/apps/:app/file-templates", consts.Create)
	router.Register[*app.FileTemplate, *app.FileTemplate, *app.FileTemplate](router.Auth(), "config/namespaces/:ns/apps/:app/file-templates/:id", consts.Delete)
	router.Register[*app.FileTemplate, *app.FileTemplate, *app.FileTemplate](router.Auth(), "config/namespaces/:ns/apps/:app/file-templates/:id", consts.Update)
	router.Register[*app.FileTemplate, *app.FileTemplate, *app.FileTemplate](router.Auth(), "config/namespaces/:ns/apps/:app/file-templates/:id", consts.Patch)
	router.Register[*app.FileTemplate, *app.FileTemplate, *app.FileTemplate](router.Auth(), "config/namespaces/:ns/apps/:app/file-templates", consts.List)
	router.Register[*app.FileTemplate, *app.FileTemplate, *app.FileTemplate](router.Auth(), "config/namespaces/:ns/apps/:app/file-templates/:id", consts.Get)
	router.Register[*namespace.App, *namespace.App, *namespace.App](router.Auth(), "config/namespaces/:ns/apps", consts.Create)
	router.Register[*namespace.App, *namespace.App, *namespace.App](router.Auth(), "config/namespaces/:ns/apps/:app", consts.Delete)
	router.Register[*namespace.App, *namespace.App, *namespace.App](router.Auth(), "config/namespaces/:ns/apps/:app", consts.Update)
	router.Register[*namespace.App, *namespace.App, *namespace.App](router.Auth(), "config/namespaces/:ns/apps/:app", consts.Patch)
	router.Register[*namespace.App, *namespace.App, *namespace.AppRsp](router.Auth(), "config/namespaces/:ns/apps", consts.List)
	router.Register[*namespace.App, *namespace.App, *namespace.App](router.Auth(), "config/namespaces/:ns/apps/:app", consts.Get)
	router.Register[*configs.Namespace, *configs.Namespace, *configs.Namespace](router.Auth(), "config/namespaces", consts.Create)
	router.Register[*configs.Namespace, *configs.Namespace, *configs.Namespace](router.Auth(), "config/namespaces/:ns", consts.Delete)
	router.Register[*configs.Namespace, *configs.Namespace, *configs.Namespace](router.Auth(), "config/namespaces/:ns", consts.Update)
	router.Register[*configs.Namespace, *configs.Namespace, *configs.Namespace](router.Auth(), "config/namespaces/:ns", consts.Patch)
	router.Register[*configs.Namespace, *configs.Namespace, *configs.Namespace](router.Auth(), "config/namespaces", consts.List)
	router.Register[*configs.Namespace, *configs.Namespace, *configs.Namespace](router.Auth(), "config/namespaces/:ns", consts.Get)
	router.Register[*iam.Group, *iam.Group, *iam.Group](router.Auth(), "iam/group", consts.List)
	router.Register[*iam.Group, *iam.Group, *iam.Group](router.Auth(), "iam/group/:id", consts.Get)
	router.Register[*iam.User, *iam.User, *iam.User](router.Auth(), "iam/user", consts.List)
	router.Register[*iam.User, *iam.User, *iam.User](router.Auth(), "iam/user/:id", consts.Get)
	router.Register[*setting.Project, *setting.Project, *setting.Project](router.Auth(), "setting/project", consts.List)
	router.Register[*setting.Project, *setting.Project, *setting.Project](router.Auth(), "setting/project/:id", consts.Get)
	router.Register[*setting.Region, *setting.Region, *setting.Region](router.Auth(), "setting/region", consts.List)
	router.Register[*setting.Region, *setting.Region, *setting.Region](router.Auth(), "setting/region/:id", consts.Get)
	router.Register[*setting.Tenant, *setting.Tenant, *setting.Tenant](router.Auth(), "setting/tenant", consts.List)
	router.Register[*setting.Tenant, *setting.Tenant, *setting.Tenant](router.Auth(), "setting/tenant/:id", consts.Get)
	router.Register[*setting.Vendor, *setting.Vendor, *setting.Vendor](router.Auth(), "setting/vendor", consts.List)
	router.Register[*setting.Vendor, *setting.Vendor, *setting.Vendor](router.Auth(), "setting/vendor/:id", consts.Get)
	return nil
}
