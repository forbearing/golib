// Code generated by gst; DO NOT EDIT.
package router

import (
	"demo/model/config"
	"demo/model/config/namespace"
	"demo/model/config/namespace/app"
	"demo/model/config/namespace/app/env"
	"demo/model/iam"
	"demo/model/setting"

	"github.com/forbearing/gst/router"
	"github.com/forbearing/gst/types"
	"github.com/forbearing/gst/types/consts"
)

func Init() error {
	router.Register[*env.File, *env.File, *env.File](router.Auth(), "config/namespaces/:ns/apps/:app/envs/:env/files", &types.ControllerConfig[*env.File]{}, consts.Create)
	router.Register[*env.File, *env.File, *env.File](router.Auth(), "config/namespaces/:ns/apps/:app/envs/:env/files/:file", &types.ControllerConfig[*env.File]{ParamName: "file"}, consts.Delete)
	router.Register[*env.File, *env.File, *env.File](router.Auth(), "config/namespaces/:ns/apps/:app/envs/:env/files/:file", &types.ControllerConfig[*env.File]{ParamName: "file"}, consts.Update)
	router.Register[*env.File, *env.File, *env.File](router.Auth(), "config/namespaces/:ns/apps/:app/envs/:env/files/:file", &types.ControllerConfig[*env.File]{ParamName: "file"}, consts.Patch)
	router.Register[*env.File, *env.File, *env.File](router.Auth(), "config/namespaces/:ns/apps/:app/envs/:env/files", &types.ControllerConfig[*env.File]{}, consts.List)
	router.Register[*env.File, *env.File, *env.File](router.Auth(), "config/namespaces/:ns/apps/:app/envs/:env/files/:file", &types.ControllerConfig[*env.File]{ParamName: "file"}, consts.Get)
	router.Register[*env.File, *env.File, *env.File](router.Auth(), "config/files", &types.ControllerConfig[*env.File]{}, consts.Create)
	router.Register[*env.File, *env.File, *env.File](router.Auth(), "config/files/:file", &types.ControllerConfig[*env.File]{ParamName: "file"}, consts.Delete)
	router.Register[*env.File, *env.File, *env.File](router.Auth(), "config/files/:file", &types.ControllerConfig[*env.File]{ParamName: "file"}, consts.Update)
	router.Register[*env.File, *env.File, *env.File](router.Auth(), "config/files/:file", &types.ControllerConfig[*env.File]{ParamName: "file"}, consts.Patch)
	router.Register[*env.File, *env.File, *env.File](router.Auth(), "config/files", &types.ControllerConfig[*env.File]{}, consts.List)
	router.Register[*env.File, *env.File, *env.File](router.Auth(), "config/files/:file", &types.ControllerConfig[*env.File]{ParamName: "file"}, consts.Get)
	router.Register[*env.Item, *env.Item, *env.Item](router.Auth(), "config/namespaces/:ns/apps/:app/envs/:env/items", &types.ControllerConfig[*env.Item]{}, consts.Create)
	router.Register[*env.Item, *env.Item, *env.Item](router.Auth(), "config/namespaces/:ns/apps/:app/envs/:env/items/:key", &types.ControllerConfig[*env.Item]{ParamName: "key"}, consts.Delete)
	router.Register[*env.Item, *env.Item, *env.Item](router.Auth(), "config/namespaces/:ns/apps/:app/envs/:env/items/:key", &types.ControllerConfig[*env.Item]{ParamName: "key"}, consts.Update)
	router.Register[*env.Item, *env.Item, *env.Item](router.Auth(), "config/namespaces/:ns/apps/:app/envs/:env/items/:key", &types.ControllerConfig[*env.Item]{ParamName: "key"}, consts.Patch)
	router.Register[*env.Item, *env.Item, *env.ItemRsp](router.Auth(), "config/namespaces/:ns/apps/:app/envs/:env/items", &types.ControllerConfig[*env.Item]{}, consts.List)
	router.Register[*env.Item, *env.Item, *env.Item](router.Auth(), "config/namespaces/:ns/apps/:app/envs/:env/items/:key", &types.ControllerConfig[*env.Item]{ParamName: "key"}, consts.Get)
	router.Register[*env.ItemParse, *env.ItemParse, *env.ItemParseRsp](router.Auth(), "config/namespaces/:ns/apps/:app/envs/:env/items-parse", &types.ControllerConfig[*env.ItemParse]{}, consts.Create)
	router.Register[*app.Env, *app.Env, *app.Env](router.Auth(), "config/namespaces/:ns/apps/:app/envs", &types.ControllerConfig[*app.Env]{}, consts.Create)
	router.Register[*app.Env, *app.Env, *app.Env](router.Auth(), "config/namespaces/:ns/apps/:app/envs/:env", &types.ControllerConfig[*app.Env]{ParamName: "env"}, consts.Delete)
	router.Register[*app.Env, *app.Env, *app.Env](router.Auth(), "config/namespaces/:ns/apps/:app/envs/:env", &types.ControllerConfig[*app.Env]{ParamName: "env"}, consts.Update)
	router.Register[*app.Env, *app.Env, *app.Env](router.Auth(), "config/namespaces/:ns/apps/:app/envs/:env", &types.ControllerConfig[*app.Env]{ParamName: "env"}, consts.Patch)
	router.Register[*app.Env, *app.Env, *app.Env](router.Auth(), "config/namespaces/:ns/apps/:app/envs", &types.ControllerConfig[*app.Env]{}, consts.List)
	router.Register[*app.Env, *app.Env, *app.Env](router.Auth(), "config/namespaces/:ns/apps/:app/envs/:env", &types.ControllerConfig[*app.Env]{ParamName: "env"}, consts.Get)
	router.Register[*app.FileTemplate, *app.FileTemplate, *app.FileTemplate](router.Auth(), "config/namespaces/:ns/apps/:app/file-templates", &types.ControllerConfig[*app.FileTemplate]{}, consts.Create)
	router.Register[*app.FileTemplate, *app.FileTemplate, *app.FileTemplate](router.Auth(), "config/namespaces/:ns/apps/:app/file-templates/:id", &types.ControllerConfig[*app.FileTemplate]{ParamName: "id"}, consts.Delete)
	router.Register[*app.FileTemplate, *app.FileTemplate, *app.FileTemplate](router.Auth(), "config/namespaces/:ns/apps/:app/file-templates/:id", &types.ControllerConfig[*app.FileTemplate]{ParamName: "id"}, consts.Update)
	router.Register[*app.FileTemplate, *app.FileTemplate, *app.FileTemplate](router.Auth(), "config/namespaces/:ns/apps/:app/file-templates/:id", &types.ControllerConfig[*app.FileTemplate]{ParamName: "id"}, consts.Patch)
	router.Register[*app.FileTemplate, *app.FileTemplate, *app.FileTemplate](router.Auth(), "config/namespaces/:ns/apps/:app/file-templates", &types.ControllerConfig[*app.FileTemplate]{}, consts.List)
	router.Register[*app.FileTemplate, *app.FileTemplate, *app.FileTemplate](router.Auth(), "config/namespaces/:ns/apps/:app/file-templates/:id", &types.ControllerConfig[*app.FileTemplate]{ParamName: "id"}, consts.Get)
	router.Register[*namespace.App, *namespace.App, *namespace.App](router.Auth(), "config/namespaces/:ns/apps", &types.ControllerConfig[*namespace.App]{}, consts.Create)
	router.Register[*namespace.App, *namespace.App, *namespace.App](router.Auth(), "config/namespaces/:ns/apps/:app", &types.ControllerConfig[*namespace.App]{ParamName: "app"}, consts.Delete)
	router.Register[*namespace.App, *namespace.App, *namespace.App](router.Auth(), "config/namespaces/:ns/apps/:app", &types.ControllerConfig[*namespace.App]{ParamName: "app"}, consts.Update)
	router.Register[*namespace.App, *namespace.App, *namespace.App](router.Auth(), "config/namespaces/:ns/apps/:app", &types.ControllerConfig[*namespace.App]{ParamName: "app"}, consts.Patch)
	router.Register[*namespace.App, *namespace.App, *namespace.AppRsp](router.Auth(), "config/namespaces/:ns/apps", &types.ControllerConfig[*namespace.App]{}, consts.List)
	router.Register[*namespace.App, *namespace.App, *namespace.App](router.Auth(), "config/namespaces/:ns/apps/:app", &types.ControllerConfig[*namespace.App]{ParamName: "app"}, consts.Get)
	router.Register[*config.Namespace, *config.Namespace, *config.Namespace](router.Auth(), "config/namespaces", &types.ControllerConfig[*config.Namespace]{}, consts.Create)
	router.Register[*config.Namespace, *config.Namespace, *config.Namespace](router.Auth(), "config/namespaces/:ns", &types.ControllerConfig[*config.Namespace]{ParamName: "ns"}, consts.Delete)
	router.Register[*config.Namespace, *config.Namespace, *config.Namespace](router.Auth(), "config/namespaces/:ns", &types.ControllerConfig[*config.Namespace]{ParamName: "ns"}, consts.Update)
	router.Register[*config.Namespace, *config.Namespace, *config.Namespace](router.Auth(), "config/namespaces/:ns", &types.ControllerConfig[*config.Namespace]{ParamName: "ns"}, consts.Patch)
	router.Register[*config.Namespace, *config.Namespace, *config.Namespace](router.Auth(), "config/namespaces", &types.ControllerConfig[*config.Namespace]{}, consts.List)
	router.Register[*config.Namespace, *config.Namespace, *config.Namespace](router.Auth(), "config/namespaces/:ns", &types.ControllerConfig[*config.Namespace]{ParamName: "ns"}, consts.Get)
	router.Register[*iam.Group, *iam.Group, *iam.Group](router.Auth(), "iam/group", &types.ControllerConfig[*iam.Group]{}, consts.List)
	router.Register[*iam.Group, *iam.Group, *iam.Group](router.Auth(), "iam/group/:id", &types.ControllerConfig[*iam.Group]{ParamName: "id"}, consts.Get)
	router.Register[*iam.User, *iam.User, *iam.User](router.Auth(), "iam/user", &types.ControllerConfig[*iam.User]{}, consts.List)
	router.Register[*iam.User, *iam.User, *iam.User](router.Auth(), "iam/user/:id", &types.ControllerConfig[*iam.User]{ParamName: "id"}, consts.Get)
	router.Register[*setting.Project, *setting.Project, *setting.Project](router.Auth(), "setting/project", &types.ControllerConfig[*setting.Project]{}, consts.List)
	router.Register[*setting.Project, *setting.Project, *setting.Project](router.Auth(), "setting/project/:id", &types.ControllerConfig[*setting.Project]{ParamName: "id"}, consts.Get)
	router.Register[*setting.Region, *setting.Region, *setting.Region](router.Auth(), "setting/region", &types.ControllerConfig[*setting.Region]{}, consts.List)
	router.Register[*setting.Region, *setting.Region, *setting.Region](router.Auth(), "setting/region/:id", &types.ControllerConfig[*setting.Region]{ParamName: "id"}, consts.Get)
	router.Register[*setting.Tenant, *setting.Tenant, *setting.Tenant](router.Auth(), "setting/tenant", &types.ControllerConfig[*setting.Tenant]{}, consts.List)
	router.Register[*setting.Tenant, *setting.Tenant, *setting.Tenant](router.Auth(), "setting/tenant/:id", &types.ControllerConfig[*setting.Tenant]{ParamName: "id"}, consts.Get)
	router.Register[*setting.Vendor, *setting.Vendor, *setting.Vendor](router.Auth(), "setting/vendor", &types.ControllerConfig[*setting.Vendor]{}, consts.List)
	router.Register[*setting.Vendor, *setting.Vendor, *setting.Vendor](router.Auth(), "setting/vendor/:id", &types.ControllerConfig[*setting.Vendor]{ParamName: "id"}, consts.Get)
	return nil
}
